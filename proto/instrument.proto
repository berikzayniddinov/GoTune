// C:\Users\berik\GolandProjects\GoTune\proto\instrument.proto
syntax = "proto3";
package instrument;

option go_package = "github.com/berik/GoTune/proto";

service InstrumentService {
  rpc CreateInstrument(CreateInstrumentRequest) returns (InstrumentResponse);
  rpc GetInstrument(GetInstrumentRequest) returns (InstrumentResponse);
  rpc UpdateInstrument(UpdateInstrumentRequest) returns (InstrumentResponse);
  rpc DeleteInstrument(DeleteInstrumentRequest) returns (DeleteInstrumentResponse);
  rpc ListInstruments(ListInstrumentsRequest) returns (ListInstrumentsResponse);
}

message Instrument {
  int32 id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  string manufacturer = 5;
  string material = 6;
  double price = 7;
  string image_url = 8;
  int32 stock_quantity = 9;
  map<string, string> specifications = 10;
}

message CreateInstrumentRequest {
  string name = 1;
  string description = 2;
  string type = 3;
  string manufacturer = 4;
  string material = 5;
  double price = 6;
  string image_url = 7;
  int32 stock_quantity = 8;
  map<string, string> specifications = 9;
}

message GetInstrumentRequest {
  int32 id = 1;
}

message UpdateInstrumentRequest {
  int32 id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  string manufacturer = 5;
  string material = 6;
  double price = 7;
  string image_url = 8;
  int32 stock_quantity = 9;
  map<string, string> specifications = 10;
}

message DeleteInstrumentRequest {
  int32 id = 1;
}

message DeleteInstrumentResponse {
  bool success = 1;
}

message ListInstrumentsRequest {
  int32 limit = 1;
  int32 offset = 2;
  string filter_type = 3;  // Опционально для фильтрации по типу
  string filter_manufacturer = 4;  // Опционально для фильтрации по производителю
}

message ListInstrumentsResponse {
  repeated Instrument instruments = 1;
}

message InstrumentResponse {
  Instrument instrument = 1;
}