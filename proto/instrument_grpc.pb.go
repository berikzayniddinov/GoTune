// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: proto/instrument.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstrumentServiceClient is the client API for InstrumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentServiceClient interface {
	CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
	GetInstrument(ctx context.Context, in *GetInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
	UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
	DeleteInstrument(ctx context.Context, in *DeleteInstrumentRequest, opts ...grpc.CallOption) (*DeleteInstrumentResponse, error)
	ListInstruments(ctx context.Context, in *ListInstrumentsRequest, opts ...grpc.CallOption) (*ListInstrumentsResponse, error)
}

type instrumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentServiceClient(cc grpc.ClientConnInterface) InstrumentServiceClient {
	return &instrumentServiceClient{cc}
}

func (c *instrumentServiceClient) CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, "/instrument.InstrumentService/CreateInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) GetInstrument(ctx context.Context, in *GetInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, "/instrument.InstrumentService/GetInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) UpdateInstrument(ctx context.Context, in *UpdateInstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, "/instrument.InstrumentService/UpdateInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) DeleteInstrument(ctx context.Context, in *DeleteInstrumentRequest, opts ...grpc.CallOption) (*DeleteInstrumentResponse, error) {
	out := new(DeleteInstrumentResponse)
	err := c.cc.Invoke(ctx, "/instrument.InstrumentService/DeleteInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) ListInstruments(ctx context.Context, in *ListInstrumentsRequest, opts ...grpc.CallOption) (*ListInstrumentsResponse, error) {
	out := new(ListInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/instrument.InstrumentService/ListInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentServiceServer is the server API for InstrumentService service.
// All implementations must embed UnimplementedInstrumentServiceServer
// for forward compatibility
type InstrumentServiceServer interface {
	CreateInstrument(context.Context, *CreateInstrumentRequest) (*InstrumentResponse, error)
	GetInstrument(context.Context, *GetInstrumentRequest) (*InstrumentResponse, error)
	UpdateInstrument(context.Context, *UpdateInstrumentRequest) (*InstrumentResponse, error)
	DeleteInstrument(context.Context, *DeleteInstrumentRequest) (*DeleteInstrumentResponse, error)
	ListInstruments(context.Context, *ListInstrumentsRequest) (*ListInstrumentsResponse, error)
	mustEmbedUnimplementedInstrumentServiceServer()
}

// UnimplementedInstrumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstrumentServiceServer struct {
}

func (UnimplementedInstrumentServiceServer) CreateInstrument(context.Context, *CreateInstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) GetInstrument(context.Context, *GetInstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) UpdateInstrument(context.Context, *UpdateInstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) DeleteInstrument(context.Context, *DeleteInstrumentRequest) (*DeleteInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) ListInstruments(context.Context, *ListInstrumentsRequest) (*ListInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstruments not implemented")
}
func (UnimplementedInstrumentServiceServer) mustEmbedUnimplementedInstrumentServiceServer() {}

// UnsafeInstrumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentServiceServer will
// result in compilation errors.
type UnsafeInstrumentServiceServer interface {
	mustEmbedUnimplementedInstrumentServiceServer()
}

func RegisterInstrumentServiceServer(s grpc.ServiceRegistrar, srv InstrumentServiceServer) {
	s.RegisterService(&InstrumentService_ServiceDesc, srv)
}

func _InstrumentService_CreateInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).CreateInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.InstrumentService/CreateInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).CreateInstrument(ctx, req.(*CreateInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.InstrumentService/GetInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).GetInstrument(ctx, req.(*GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_UpdateInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).UpdateInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.InstrumentService/UpdateInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).UpdateInstrument(ctx, req.(*UpdateInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_DeleteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).DeleteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.InstrumentService/DeleteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).DeleteInstrument(ctx, req.(*DeleteInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_ListInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).ListInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument.InstrumentService/ListInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).ListInstruments(ctx, req.(*ListInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstrumentService_ServiceDesc is the grpc.ServiceDesc for InstrumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstrumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instrument.InstrumentService",
	HandlerType: (*InstrumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstrument",
			Handler:    _InstrumentService_CreateInstrument_Handler,
		},
		{
			MethodName: "GetInstrument",
			Handler:    _InstrumentService_GetInstrument_Handler,
		},
		{
			MethodName: "UpdateInstrument",
			Handler:    _InstrumentService_UpdateInstrument_Handler,
		},
		{
			MethodName: "DeleteInstrument",
			Handler:    _InstrumentService_DeleteInstrument_Handler,
		},
		{
			MethodName: "ListInstruments",
			Handler:    _InstrumentService_ListInstruments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/instrument.proto",
}
